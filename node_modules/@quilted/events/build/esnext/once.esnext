import { addEventHandler } from './handler.esnext';
import { AbortError } from './abort/AbortError.esnext';
import { NestedAbortController } from './abort/NestedAbortController.esnext';

async function once(target, event, options) {
  const signal = options?.signal;
  const abortBehavior = options?.abort ?? "return";
  if (signal?.aborted) {
    if (abortBehavior === "return") {
      return void 0;
    } else {
      throw new AbortError();
    }
  }
  const listenerAbortController = signal ? new NestedAbortController(signal) : new AbortController();
  const signalAbortController = signal && new AbortController();
  return new Promise((resolve, reject) => {
    const resolver = (...args) => {
      signalAbortController?.abort();
      resolve(args.length > 1 ? args : args[0]);
    };
    addEventHandler(target, event, resolver, {
      once: true,
      signal: listenerAbortController.signal
    });
    if (signal) {
      addEventHandler(
        signal,
        "abort",
        () => {
          signalAbortController.abort();
          if (abortBehavior === "return") {
            resolve();
          } else {
            reject(new AbortError());
          }
        },
        { once: true }
      );
    }
  });
}

export { once };
