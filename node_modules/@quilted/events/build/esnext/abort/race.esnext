import { AbortError } from './AbortError.esnext';

async function raceAgainstAbortSignal(race, {
  signal,
  onAbort
}) {
  const raceAbort = new AbortController();
  const result = await Promise.race([racer(), abortRacer()]);
  return result;
  async function racer() {
    try {
      const result2 = await race();
      return result2;
    } finally {
      raceAbort.abort();
    }
  }
  async function abortRacer() {
    await new Promise((resolve, reject) => {
      signal.addEventListener(
        "abort",
        async () => {
          try {
            if (onAbort) await onAbort();
            reject(new AbortError());
          } catch (error) {
            reject(error);
          }
        },
        { signal: raceAbort.signal }
      );
      raceAbort.signal.addEventListener(
        "abort",
        () => {
          resolve();
        },
        { signal }
      );
    });
  }
}

export { raceAgainstAbortSignal };
