import { Thread } from '../Thread.esnext';
import { portToMessageTarget } from './ThreadMessagePort.esnext';

class ThreadServiceWorker extends Thread {
  worker;
  /**
   * Starts a thread wrapped around a `ServiceWorker` object, providing the second
   * argument as the exports of the thread.
   *
   * @example
   * ```ts
   * import {ThreadServiceWorker} from '@quilted/threads';
   *
   * // On the main thread:
   *
   * const registration = await navigator.serviceWorker.register('worker.js');
   * const serviceWorker = registration.installing ?? registration.waiting ?? registration.active;
   * const {getMessage} = ThreadServiceWorker.import(serviceWorker);
   * const message = await getMessage(); // 'Hello, world!'
   *
   * // In your service worker:
   *
   * import {ThreadServiceWorkerClients} from '@quilted/threads';
   *
   * ThreadServiceWorkerClients.export({
   *   async getMessage() {
   *     return 'Hello, world!';
   *   },
   * });
   * ```
   */
  static import(worker, options) {
    return new ThreadServiceWorker(worker, options).imports;
  }
  /**
   * Starts a thread wrapped around a `ServiceWorker` object, providing the second
   * argument as the exports of the thread.
   *
   * @example
   * ```ts
   * import {ThreadServiceWorker} from '@quilted/threads';
   *
   * // On the main thread:
   *
   * const registration = await navigator.serviceWorker.register('worker.js');
   * const serviceWorker = registration.installing ?? registration.waiting ?? registration.active;
   * ThreadServiceWorker.export(serviceWorker, {
   *   async getMessage() {
   *     return 'Hello, world!';
   *   },
   * });
   *
   * // In your service worker:
   *
   * import {ThreadServiceWorkerClients} from '@quilted/threads';
   *
   * const threads = new ThreadServiceWorkerClients();
   *
   * serviceWorker.addEventListener('message', (event) => {
   *   const source = event.source;
   *   const {getMessage} = threads.get(source).imports;
   *   const message = await getMessage(); // 'Hello, world!'
   * });
   * ```
   */
  static export(worker, exports, options) {
    new ThreadServiceWorker(worker, { ...options, exports });
  }
  constructor(worker, options) {
    super(portToMessageTarget(worker), options);
    this.worker = worker;
  }
}

export { ThreadServiceWorker };
