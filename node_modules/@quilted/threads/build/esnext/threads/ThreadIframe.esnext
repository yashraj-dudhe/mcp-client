import { Thread } from '../Thread.esnext';
import { windowToThreadTarget } from './window/ThreadWindow.esnext';

class ThreadIframe extends Thread {
  iframe;
  /**
   * Starts a thread wrapped around an iframe element, and returns the imports
   * of the thread.
   *
   * @example
   * ```ts
   * import {ThreadIframe} from '@quilted/threads';
   *
   * const {getMessage} = ThreadIframe.import(iframe);
   * const message = await getMessage(); // 'Hello, world!'
   *
   * // In the nested window:
   *
   * import {ThreadNestedIframe} from '@quilted/threads';
   *
   * ThreadNestedIframe.export({
   *   async getMessage() {
   *     return 'Hello, world!';
   *   },
   * });
   * ```
   */
  static import(iframe, options) {
    return new ThreadIframe(iframe, options).imports;
  }
  /**
   * Starts a thread wrapped around an iframe element, providing the second
   * argument as the exports of the thread.
   *
   * @example
   * ```ts
   * import {ThreadIframe} from '@quilted/threads';
   *
   * ThreadIframe.export(iframe, {
   *   async getMessage() {
   *     return 'Hello, world!';
   *   },
   * });
   *
   * // In the nested iframe:
   *
   * import {ThreadNestedIframe} from '@quilted/threads';
   *
   * const {getMessage} = ThreadNestedIframe.import();
   * const message = await getMessage(); // 'Hello, world!'
   * ```
   */
  static export(iframe, exports, options) {
    new ThreadIframe(iframe, { ...options, exports });
  }
  constructor(iframe, {
    targetOrigin = "*",
    ...options
  } = {}) {
    super(windowToThreadTarget(iframe.contentWindow, { targetOrigin }), options);
    this.iframe = iframe;
  }
}

export { ThreadIframe };
