import { Thread, type ThreadOptions, type ThreadMessageTarget } from '../../Thread.ts';
export interface ThreadWindowOptions<Imports = Record<string, never>, Exports = Record<string, never>> extends ThreadOptions<Imports, Exports> {
    targetOrigin?: string;
}
/**
 * Creates a thread from a `Window` created by this environment.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
 *
 * @example
 * import {ThreadWindow} from '@quilted/threads';
 *
 * const popup = window.open('https://my-app.com/popup', 'MyAppPopup', 'popup');
 * const thread = new ThreadWindow(popup);
 * await thread.imports.sendMessage('Hello world!');
 */
export declare class ThreadWindow<Imports = Record<string, never>, Exports = Record<string, never>> extends Thread<Imports, Exports> {
    readonly window: Window;
    /**
     * Starts a thread wrapped around a `window` object, and returns the imports
     * of the thread.
     *
     * @example
     * ```ts
     * import {ThreadWindow} from '@quilted/threads';
     *
     * const {getMessage} = ThreadWindow.import(window);
     * const message = await getMessage(); // 'Hello, world!'
     *
     * // In the nested window:
     *
     * import {ThreadNestedWindow} from '@quilted/threads';
     *
     * ThreadNestedWindow.export(window.opener, {
     *   async getMessage() {
     *     return 'Hello, world!';
     *   },
     * });
     * ```
     */
    static import<Imports = Record<string, never>>(window: Window, options?: Omit<ThreadWindowOptions<Imports, Record<string, never>>, 'imports'>): import("../../Thread.ts").ThreadImports<Record<string, never>>;
    /**
     * Starts a thread wrapped around a `window` object, providing the second
     * argument as the exports of the thread.
     *
     * @example
     * ```ts
     * import {ThreadWindow} from '@quilted/threads';
     *
     * ThreadWindow.export(window, {
     *   async getMessage() {
     *     return 'Hello, world!';
     *   },
     * });
     *
     * // In the nested window:
     *
     * import {ThreadNestedWindow} from '@quilted/threads';
     *
     * const {getMessage} = ThreadNestedWindow.import(window.opener);
     * const message = await getMessage(); // 'Hello, world!'
     * ```
     */
    static export<Exports = Record<string, never>>(window: Window, exports: Exports, options?: Omit<ThreadWindowOptions<Record<string, never>, Exports>, 'exports'>): void;
    constructor(window: Window, { targetOrigin, ...options }?: ThreadWindowOptions<Imports, Exports>);
}
export declare function windowToThreadTarget(window: Window, { targetOrigin }?: {
    targetOrigin?: string;
}): ThreadMessageTarget;
//# sourceMappingURL=ThreadWindow.d.ts.map