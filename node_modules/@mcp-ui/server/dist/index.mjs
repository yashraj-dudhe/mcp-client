function o(t) {
  if (typeof Buffer < "u")
    return Buffer.from(t, "utf-8").toString("base64");
  if (typeof TextEncoder < "u" && typeof btoa < "u") {
    const r = new TextEncoder().encode(t);
    let n = "";
    return r.forEach((i) => {
      n += String.fromCharCode(i);
    }), btoa(n);
  } else {
    console.warn(
      "MCP SDK: Buffer API and TextEncoder/btoa not available. Base64 encoding might not be UTF-8 safe."
    );
    try {
      return btoa(t);
    } catch {
      throw new Error(
        "MCP SDK: Suitable UTF-8 to Base64 encoding method not found, and fallback btoa failed."
      );
    }
  }
}
function a(t) {
  let e, r;
  if (t.content.type === "rawHtml") {
    if (!t.uri.startsWith("ui://"))
      throw new Error(
        "MCP SDK: URI must start with 'ui://' when content.type is 'rawHtml'."
      );
    if (e = t.content.htmlString, typeof e != "string")
      throw new Error(
        "MCP SDK: content.htmlString must be provided as a string when content.type is 'rawHtml'."
      );
    r = "text/html";
  } else if (t.content.type === "externalUrl") {
    if (!t.uri.startsWith("ui://"))
      throw new Error(
        "MCP SDK: URI must start with 'ui://' when content.type is 'externalUrl'."
      );
    if (e = t.content.iframeUrl, typeof e != "string")
      throw new Error(
        "MCP SDK: content.iframeUrl must be provided as a string when content.type is 'externalUrl'."
      );
    r = "text/uri-list";
  } else if (t.content.type === "remoteDom") {
    if (!t.uri.startsWith("ui://"))
      throw new Error(
        "MCP SDK: URI must start with 'ui://' when content.type is 'remoteDom'."
      );
    if (e = t.content.script, typeof e != "string")
      throw new Error(
        "MCP SDK: content.script must be provided as a string when content.type is 'remoteDom'."
      );
    r = `application/vnd.mcp-ui.remote-dom+javascript; flavor=${t.content.flavor}`;
  } else {
    const i = t.content;
    throw new Error(
      `MCP SDK: Invalid content.type specified: ${i}`
    );
  }
  let n;
  switch (t.delivery) {
    case "text":
      n = {
        uri: t.uri,
        mimeType: r,
        text: e
      };
      break;
    case "blob":
      n = {
        uri: t.uri,
        mimeType: r,
        blob: o(e)
      };
      break;
    default: {
      const i = t.delivery;
      throw new Error(`Invalid delivery type: ${i}`);
    }
  }
  return {
    type: "resource",
    resource: n
  };
}
function c(t) {
  window.parent && window.parent.postMessage(t, "*");
}
function u(t, e) {
  return {
    type: "tool",
    payload: {
      toolName: t,
      params: e
    }
  };
}
function l(t) {
  return {
    type: "prompt",
    payload: {
      prompt: t
    }
  };
}
function s(t) {
  return {
    type: "link",
    payload: {
      url: t
    }
  };
}
function f(t, e) {
  return {
    type: "intent",
    payload: {
      intent: t,
      params: e
    }
  };
}
function d(t) {
  return {
    type: "notification",
    payload: {
      message: t
    }
  };
}
export {
  a as createHtmlResource,
  c as postUiActionResult,
  f as uiActionResultIntent,
  s as uiActionResultLink,
  d as uiActionResultNotification,
  l as uiActionResultPrompt,
  u as uiActionResultToolCall
};
//# sourceMappingURL=index.mjs.map
