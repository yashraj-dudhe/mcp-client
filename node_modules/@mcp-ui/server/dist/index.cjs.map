{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * Defines the structure of an interactive HTML resource block\n * that the server will send to the client.\n */\n\n// Import types first\nimport {\n  Base64BlobContent,\n  CreateHtmlResourceOptions,\n  HtmlTextContent,\n  MimeType,\n  UiActionResult,\n  UiActionResultLink,\n  UiActionResultNotification,\n  UiActionResultPrompt,\n  UiActionResultIntent,\n  UiActionResultToolCall,\n} from './types.js';\n\nexport type HtmlResourceBlock = {\n  type: 'resource';\n  resource: HtmlTextContent | Base64BlobContent;\n};\n\n/**\n * Robustly encodes a UTF-8 string to Base64.\n * Uses Node.js Buffer if available, otherwise TextEncoder and btoa.\n * @param str The string to encode.\n * @returns Base64 encoded string.\n */\nfunction robustUtf8ToBase64(str: string): string {\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } else if (\n    typeof TextEncoder !== 'undefined' &&\n    typeof btoa !== 'undefined'\n  ) {\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(str);\n    let binaryString = '';\n    uint8Array.forEach((byte) => {\n      binaryString += String.fromCharCode(byte);\n    });\n    return btoa(binaryString);\n  } else {\n    console.warn(\n      'MCP SDK: Buffer API and TextEncoder/btoa not available. Base64 encoding might not be UTF-8 safe.',\n    );\n    try {\n      return btoa(str);\n    } catch (e) {\n      throw new Error(\n        'MCP SDK: Suitable UTF-8 to Base64 encoding method not found, and fallback btoa failed.',\n      );\n    }\n  }\n}\n\n/**\n * Creates an HtmlResourceBlock.\n * This is the object that should be included in the 'content' array of a toolResult.\n * @param options Configuration for the interactive resource.\n * @returns An HtmlResourceBlock.\n */\nexport function createHtmlResource(\n  options: CreateHtmlResourceOptions,\n): HtmlResourceBlock {\n  let actualContentString: string;\n  let mimeType: MimeType;\n\n  if (options.content.type === 'rawHtml') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'rawHtml'.\",\n      );\n    }\n    actualContentString = options.content.htmlString;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.htmlString must be provided as a string when content.type is 'rawHtml'.\",\n      );\n    }\n    mimeType = 'text/html';\n  } else if (options.content.type === 'externalUrl') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'externalUrl'.\",\n      );\n    }\n    actualContentString = options.content.iframeUrl;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.iframeUrl must be provided as a string when content.type is 'externalUrl'.\",\n      );\n    }\n    mimeType = 'text/uri-list';\n  } else if (options.content.type === 'remoteDom') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'remoteDom'.\",\n      );\n    }\n    actualContentString = options.content.script;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.script must be provided as a string when content.type is 'remoteDom'.\",\n      );\n    }\n    mimeType =\n      `application/vnd.mcp-ui.remote-dom+javascript; flavor=${options.content.flavor}`;\n  } else {\n    // This case should ideally be prevented by TypeScript's discriminated union checks\n    const exhaustiveCheckContent: never = options.content;\n    throw new Error(\n      `MCP SDK: Invalid content.type specified: ${exhaustiveCheckContent}`,\n    );\n  }\n\n  let resource: HtmlResourceBlock['resource'];\n\n  switch (options.delivery) {\n    case 'text':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        text: actualContentString,\n      };\n      break;\n    case 'blob':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        blob: robustUtf8ToBase64(actualContentString),\n      };\n      break;\n    default:\n      {\n        const exhaustiveCheck: never = options.delivery;\n        throw new Error(`Invalid delivery type: ${exhaustiveCheck}`);\n      };\n  }\n\n  return {\n    type: 'resource',\n    resource: resource,\n  };\n}\n\nexport type {\n  CreateHtmlResourceOptions,\n  ResourceContentPayload,\n  UiActionResult,\n} from './types.js';\n\nexport function postUiActionResult(result: UiActionResult): void {\n  if (window.parent) {\n    window.parent.postMessage(result, '*');\n  }\n}\n\nexport function uiActionResultToolCall(\n  toolName: string,\n  params: Record<string, unknown>,\n): UiActionResultToolCall {\n  return {\n    type: 'tool',\n    payload: {\n      toolName,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultPrompt(prompt: string): UiActionResultPrompt {\n  return {\n    type: 'prompt',\n    payload: {\n      prompt,\n    },\n  };\n}\n\nexport function uiActionResultLink(url: string): UiActionResultLink {\n  return {\n    type: 'link',\n    payload: {\n      url,\n    },\n  };\n}\n\nexport function uiActionResultIntent(\n  intent: string,\n  params: Record<string, unknown>,\n): UiActionResultIntent {\n  return {\n    type: 'intent',\n    payload: {\n      intent,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultNotification(\n  message: string,\n): UiActionResultNotification {\n  return {\n    type: 'notification',\n    payload: {\n      message,\n    },\n  };\n}\n"],"names":["robustUtf8ToBase64","str","uint8Array","binaryString","byte","createHtmlResource","options","actualContentString","mimeType","exhaustiveCheckContent","resource","exhaustiveCheck","postUiActionResult","result","uiActionResultToolCall","toolName","params","uiActionResultPrompt","prompt","uiActionResultLink","url","uiActionResultIntent","intent","uiActionResultNotification","message"],"mappings":"gFA8BA,SAASA,EAAmBC,EAAqB,CAC/C,GAAI,OAAO,OAAW,IACpB,OAAO,OAAO,KAAKA,EAAK,OAAO,EAAE,SAAS,QAAQ,KAElD,OAAO,YAAgB,KACvB,OAAO,KAAS,IAChB,CAEA,MAAMC,EADU,IAAI,YAAA,EACO,OAAOD,CAAG,EACrC,IAAIE,EAAe,GACnB,OAAAD,EAAW,QAASE,GAAS,CAC3BD,GAAgB,OAAO,aAAaC,CAAI,CAAA,CACzC,EACM,KAAKD,CAAY,CAAA,KACnB,CACL,QAAQ,KACN,kGAAA,EAEF,GAAI,CACF,OAAO,KAAKF,CAAG,CAAA,MACL,CACV,MAAM,IAAI,MACR,wFAAA,CACF,CACF,CAEJ,CAQO,SAASI,EACdC,EACmB,CACnB,IAAIC,EACAC,EAEJ,GAAIF,EAAQ,QAAQ,OAAS,UAAW,CACtC,GAAI,CAACA,EAAQ,IAAI,WAAW,OAAO,EACjC,MAAM,IAAI,MACR,sEAAA,EAIJ,GADAC,EAAsBD,EAAQ,QAAQ,WAClC,OAAOC,GAAwB,SACjC,MAAM,IAAI,MACR,0FAAA,EAGJC,EAAW,WAAA,SACFF,EAAQ,QAAQ,OAAS,cAAe,CACjD,GAAI,CAACA,EAAQ,IAAI,WAAW,OAAO,EACjC,MAAM,IAAI,MACR,0EAAA,EAIJ,GADAC,EAAsBD,EAAQ,QAAQ,UAClC,OAAOC,GAAwB,SACjC,MAAM,IAAI,MACR,6FAAA,EAGJC,EAAW,eAAA,SACFF,EAAQ,QAAQ,OAAS,YAAa,CAC/C,GAAI,CAACA,EAAQ,IAAI,WAAW,OAAO,EACjC,MAAM,IAAI,MACR,wEAAA,EAIJ,GADAC,EAAsBD,EAAQ,QAAQ,OAClC,OAAOC,GAAwB,SACjC,MAAM,IAAI,MACR,wFAAA,EAGJC,EACE,wDAAwDF,EAAQ,QAAQ,MAAM,EAAA,KAC3E,CAEL,MAAMG,EAAgCH,EAAQ,QAC9C,MAAM,IAAI,MACR,4CAA4CG,CAAsB,EAAA,CACpE,CAGF,IAAIC,EAEJ,OAAQJ,EAAQ,SAAA,CACd,IAAK,OACHI,EAAW,CACT,IAAKJ,EAAQ,IACb,SAAAE,EACA,KAAMD,CAAA,EAER,MACF,IAAK,OACHG,EAAW,CACT,IAAKJ,EAAQ,IACb,SAAAE,EACA,KAAMR,EAAmBO,CAAmB,CAAA,EAE9C,MACF,QACE,CACE,MAAMI,EAAyBL,EAAQ,SACvC,MAAM,IAAI,MAAM,0BAA0BK,CAAe,EAAE,CAAA,CAC5D,CAGL,MAAO,CACL,KAAM,WACN,SAAAD,CAAA,CAEJ,CAQO,SAASE,EAAmBC,EAA8B,CAC3D,OAAO,QACT,OAAO,OAAO,YAAYA,EAAQ,GAAG,CAEzC,CAEO,SAASC,EACdC,EACAC,EACwB,CACxB,MAAO,CACL,KAAM,OACN,QAAS,CACP,SAAAD,EACA,OAAAC,CAAA,CACF,CAEJ,CAEO,SAASC,EAAqBC,EAAsC,CACzE,MAAO,CACL,KAAM,SACN,QAAS,CACP,OAAAA,CAAA,CACF,CAEJ,CAEO,SAASC,EAAmBC,EAAiC,CAClE,MAAO,CACL,KAAM,OACN,QAAS,CACP,IAAAA,CAAA,CACF,CAEJ,CAEO,SAASC,EACdC,EACAN,EACsB,CACtB,MAAO,CACL,KAAM,SACN,QAAS,CACP,OAAAM,EACA,OAAAN,CAAA,CACF,CAEJ,CAEO,SAASO,EACdC,EAC4B,CAC5B,MAAO,CACL,KAAM,eACN,QAAS,CACP,QAAAA,CAAA,CACF,CAEJ"}