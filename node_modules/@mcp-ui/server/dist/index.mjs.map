{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * Defines the structure of an interactive HTML resource block\n * that the server will send to the client.\n */\n\n// Import types first\nimport {\n  Base64BlobContent,\n  CreateHtmlResourceOptions,\n  HtmlTextContent,\n  MimeType,\n  UiActionResult,\n  UiActionResultLink,\n  UiActionResultNotification,\n  UiActionResultPrompt,\n  UiActionResultIntent,\n  UiActionResultToolCall,\n} from './types.js';\n\nexport type HtmlResourceBlock = {\n  type: 'resource';\n  resource: HtmlTextContent | Base64BlobContent;\n};\n\n/**\n * Robustly encodes a UTF-8 string to Base64.\n * Uses Node.js Buffer if available, otherwise TextEncoder and btoa.\n * @param str The string to encode.\n * @returns Base64 encoded string.\n */\nfunction robustUtf8ToBase64(str: string): string {\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } else if (\n    typeof TextEncoder !== 'undefined' &&\n    typeof btoa !== 'undefined'\n  ) {\n    const encoder = new TextEncoder();\n    const uint8Array = encoder.encode(str);\n    let binaryString = '';\n    uint8Array.forEach((byte) => {\n      binaryString += String.fromCharCode(byte);\n    });\n    return btoa(binaryString);\n  } else {\n    console.warn(\n      'MCP SDK: Buffer API and TextEncoder/btoa not available. Base64 encoding might not be UTF-8 safe.',\n    );\n    try {\n      return btoa(str);\n    } catch (e) {\n      throw new Error(\n        'MCP SDK: Suitable UTF-8 to Base64 encoding method not found, and fallback btoa failed.',\n      );\n    }\n  }\n}\n\n/**\n * Creates an HtmlResourceBlock.\n * This is the object that should be included in the 'content' array of a toolResult.\n * @param options Configuration for the interactive resource.\n * @returns An HtmlResourceBlock.\n */\nexport function createHtmlResource(\n  options: CreateHtmlResourceOptions,\n): HtmlResourceBlock {\n  let actualContentString: string;\n  let mimeType: MimeType;\n\n  if (options.content.type === 'rawHtml') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'rawHtml'.\",\n      );\n    }\n    actualContentString = options.content.htmlString;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.htmlString must be provided as a string when content.type is 'rawHtml'.\",\n      );\n    }\n    mimeType = 'text/html';\n  } else if (options.content.type === 'externalUrl') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'externalUrl'.\",\n      );\n    }\n    actualContentString = options.content.iframeUrl;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.iframeUrl must be provided as a string when content.type is 'externalUrl'.\",\n      );\n    }\n    mimeType = 'text/uri-list';\n  } else if (options.content.type === 'remoteDom') {\n    if (!options.uri.startsWith('ui://')) {\n      throw new Error(\n        \"MCP SDK: URI must start with 'ui://' when content.type is 'remoteDom'.\",\n      );\n    }\n    actualContentString = options.content.script;\n    if (typeof actualContentString !== 'string') {\n      throw new Error(\n        \"MCP SDK: content.script must be provided as a string when content.type is 'remoteDom'.\",\n      );\n    }\n    mimeType =\n      `application/vnd.mcp-ui.remote-dom+javascript; flavor=${options.content.flavor}`;\n  } else {\n    // This case should ideally be prevented by TypeScript's discriminated union checks\n    const exhaustiveCheckContent: never = options.content;\n    throw new Error(\n      `MCP SDK: Invalid content.type specified: ${exhaustiveCheckContent}`,\n    );\n  }\n\n  let resource: HtmlResourceBlock['resource'];\n\n  switch (options.delivery) {\n    case 'text':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        text: actualContentString,\n      };\n      break;\n    case 'blob':\n      resource = {\n        uri: options.uri,\n        mimeType: mimeType as MimeType,\n        blob: robustUtf8ToBase64(actualContentString),\n      };\n      break;\n    default:\n      {\n        const exhaustiveCheck: never = options.delivery;\n        throw new Error(`Invalid delivery type: ${exhaustiveCheck}`);\n      };\n  }\n\n  return {\n    type: 'resource',\n    resource: resource,\n  };\n}\n\nexport type {\n  CreateHtmlResourceOptions,\n  ResourceContentPayload,\n  UiActionResult,\n} from './types.js';\n\nexport function postUiActionResult(result: UiActionResult): void {\n  if (window.parent) {\n    window.parent.postMessage(result, '*');\n  }\n}\n\nexport function uiActionResultToolCall(\n  toolName: string,\n  params: Record<string, unknown>,\n): UiActionResultToolCall {\n  return {\n    type: 'tool',\n    payload: {\n      toolName,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultPrompt(prompt: string): UiActionResultPrompt {\n  return {\n    type: 'prompt',\n    payload: {\n      prompt,\n    },\n  };\n}\n\nexport function uiActionResultLink(url: string): UiActionResultLink {\n  return {\n    type: 'link',\n    payload: {\n      url,\n    },\n  };\n}\n\nexport function uiActionResultIntent(\n  intent: string,\n  params: Record<string, unknown>,\n): UiActionResultIntent {\n  return {\n    type: 'intent',\n    payload: {\n      intent,\n      params,\n    },\n  };\n}\n\nexport function uiActionResultNotification(\n  message: string,\n): UiActionResultNotification {\n  return {\n    type: 'notification',\n    payload: {\n      message,\n    },\n  };\n}\n"],"names":["robustUtf8ToBase64","str","uint8Array","binaryString","byte","createHtmlResource","options","actualContentString","mimeType","exhaustiveCheckContent","resource","exhaustiveCheck","postUiActionResult","result","uiActionResultToolCall","toolName","params","uiActionResultPrompt","prompt","uiActionResultLink","url","uiActionResultIntent","intent","uiActionResultNotification","message"],"mappings":"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"}