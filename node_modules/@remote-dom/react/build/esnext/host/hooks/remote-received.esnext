import { useState, useDebugValue, useEffect } from 'react';

function useRemoteReceived(remote, receiver) {
  const [state, setState] = useState(() => {
    const value = receiver.get(remote);
    return {
      id: remote.id,
      version: value?.version,
      value,
      receiver
    };
  });
  let returnValue = state.value;
  if (state.receiver !== receiver || state.id !== remote.id) {
    const updated = receiver.get(remote);
    returnValue = updated;
    setState({
      receiver,
      id: remote.id,
      version: updated?.version,
      value: returnValue
    });
  }
  useDebugValue(returnValue);
  useEffect(() => {
    const abort = new AbortController();
    const checkForUpdates = () => {
      if (abort.signal.aborted) return;
      setState((previousState) => {
        const {
          id: previousId,
          version: previousVersion,
          receiver: previousReceiver
        } = previousState;
        const { id } = remote;
        if (previousReceiver !== receiver || previousId !== id) {
          return previousState;
        }
        const value = receiver.get(remote);
        const version = value?.version;
        if (previousVersion === version) {
          return previousState;
        }
        return { receiver, value, id, version };
      });
    };
    receiver.subscribe(remote, checkForUpdates, { signal: abort.signal });
    checkForUpdates();
    return () => {
      abort.abort();
    };
  }, [receiver, remote.id]);
  return returnValue;
}

export { useRemoteReceived };
