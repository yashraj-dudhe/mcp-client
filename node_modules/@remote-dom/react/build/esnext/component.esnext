import { forwardRef, useRef, isValidElement, cloneElement, createElement, useLayoutEffect } from 'react';

function createRemoteComponent(tag, Element = customElements.get(tag), {
  slotProps = true,
  eventProps = {}
} = {}) {
  const normalizeSlotProps = Boolean(slotProps);
  const slotPropWrapperOption = (typeof slotProps === "object" ? slotProps.wrapper : void 0) ?? true;
  const slotPropWrapper = typeof slotPropWrapperOption === "string" ? slotPropWrapperOption : slotPropWrapperOption ? "remote-fragment" : false;
  const RemoteComponent = forwardRef(function RemoteComponent2(props, ref) {
    const internalRef = useRef();
    const lastRemotePropertiesRef = useRef();
    const remoteProperties = {};
    const children = toChildren(props.children);
    for (const prop in props) {
      const propValue = props[prop];
      if (prop === "slot") {
        remoteProperties.slot = propValue;
        continue;
      }
      if (normalizeSlotProps && Element.remoteSlotDefinitions.has(prop) && isValidElement(propValue)) {
        if (!slotPropWrapper) {
          children.push(cloneElement(propValue, { slot: prop }));
        } else {
          children.push(
            createElement(slotPropWrapper, { slot: prop }, propValue)
          );
        }
        continue;
      }
      remoteProperties[prop] = propValue;
    }
    useLayoutEffect(() => {
      const element = internalRef.current;
      if (element == null) return;
      for (const prop in remoteProperties) {
        if (prop === "children") continue;
        const oldValue = lastRemotePropertiesRef.current?.[prop];
        const newValue = remoteProperties[prop];
        if (oldValue === newValue) continue;
        const eventProp = eventProps[prop];
        if (eventProp) {
          const eventName = eventProp.event;
          if (oldValue) element.removeEventListener(eventName, oldValue);
          if (newValue) element.addEventListener(eventName, newValue);
          continue;
        }
        if (prop in element) {
          element[prop] = remoteProperties[prop];
          continue;
        }
        if (newValue == null) {
          element.removeAttribute(prop);
        } else {
          element.setAttribute(prop, String(newValue));
        }
      }
      lastRemotePropertiesRef.current = remoteProperties;
    });
    return createElement(
      tag,
      {
        ref: (refValue) => {
          internalRef.current = refValue;
          if (typeof ref === "function") ref(refValue);
          else if (ref != null) ref.current = refValue;
        }
      },
      ...children
    );
  });
  RemoteComponent.displayName = `RemoteComponent(${tag})`;
  return RemoteComponent;
}
function toChildren(value) {
  if (value == null) return [];
  if (Array.isArray(value)) return [...value];
  return [value];
}

export { createRemoteComponent };
