import type { Node } from './Node.ts';
import { ChildNode } from './ChildNode.ts';
import { NodeList } from './NodeList.ts';
export declare class ParentNode extends ChildNode {
    readonly childNodes: NodeList;
    readonly children: NodeList;
    appendChild(child: Node): void;
    insertBefore(child: Node, ref?: Node | null): void;
    append(...nodes: (Node | string)[]): void;
    prepend(...nodes: (Node | string)[]): void;
    replaceChildren(...nodes: (Node | string)[]): void;
    removeChild(child: Node): void;
    replaceChild(newChild: Node, oldChild: Node): void;
    querySelectorAll(selector: string): import("./Element.ts").Element[];
    querySelector(selector: string): null;
    private insertInto;
}
//# sourceMappingURL=ParentNode.d.ts.map