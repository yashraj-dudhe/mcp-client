import { Document } from './Document.ts';
import { Event } from './Event.ts';
import { EventTarget } from './EventTarget.ts';
import { CustomEvent } from './CustomEvent.ts';
import { Node } from './Node.ts';
import { ParentNode } from './ParentNode.ts';
import { ChildNode } from './ChildNode.ts';
import { Element } from './Element.ts';
import { HTMLElement } from './HTMLElement.ts';
import { SVGElement } from './SVGElement.ts';
import { CharacterData } from './CharacterData.ts';
import { Text } from './Text.ts';
import { Comment } from './Comment.ts';
import { DocumentFragment } from './DocumentFragment.ts';
import { HTMLTemplateElement } from './HTMLTemplateElement.ts';
import { CustomElementRegistryImplementation } from './CustomElementRegistry.ts';
import { MutationObserver } from './MutationObserver.ts';
import { HOOKS } from './constants.ts';
import type { Hooks } from './hooks.ts';
export declare class Window extends EventTarget {
    [HOOKS]: Partial<Hooks>;
    name: string;
    window: this;
    parent: this;
    self: this;
    top: this;
    document: Document;
    customElements: CustomElementRegistryImplementation;
    location: Location;
    navigator: Navigator;
    Event: typeof Event;
    EventTarget: typeof EventTarget;
    CustomEvent: typeof CustomEvent;
    Node: typeof Node;
    ParentNode: typeof ParentNode;
    ChildNode: typeof ChildNode;
    DocumentFragment: typeof DocumentFragment;
    Document: typeof Document;
    CharacterData: typeof CharacterData;
    Comment: typeof Comment;
    Text: typeof Text;
    Element: typeof Element;
    HTMLElement: typeof HTMLElement;
    SVGElement: typeof SVGElement;
    HTMLTemplateElement: typeof HTMLTemplateElement;
    MutationObserver: typeof MutationObserver;
    static setGlobal(window: Window): void;
    static setGlobalThis(window: Window): void;
}
//# sourceMappingURL=Window.d.ts.map