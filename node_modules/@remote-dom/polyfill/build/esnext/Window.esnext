import { Document } from './Document.esnext';
import { Event } from './Event.esnext';
import { EventTarget } from './EventTarget.esnext';
import { CustomEvent } from './CustomEvent.esnext';
import { Node } from './Node.esnext';
import { ParentNode } from './ParentNode.esnext';
import { ChildNode } from './ChildNode.esnext';
import { Element } from './Element.esnext';
import { HTMLElement } from './HTMLElement.esnext';
import { SVGElement } from './SVGElement.esnext';
import { CharacterData } from './CharacterData.esnext';
import { Text } from './Text.esnext';
import { Comment } from './Comment.esnext';
import { DocumentFragment } from './DocumentFragment.esnext';
import { HTMLTemplateElement } from './HTMLTemplateElement.esnext';
import { CustomElementRegistryImplementation } from './CustomElementRegistry.esnext';
import { MutationObserver } from './MutationObserver.esnext';
import { HOOKS } from './constants.esnext';

class Window extends EventTarget {
  [HOOKS] = {};
  name = "";
  window = this;
  parent = this;
  self = this;
  top = this;
  document = new Document(this);
  customElements = new CustomElementRegistryImplementation();
  location = globalThis.location;
  navigator = globalThis.navigator;
  Event = Event;
  EventTarget = EventTarget;
  CustomEvent = CustomEvent;
  Node = Node;
  ParentNode = ParentNode;
  ChildNode = ChildNode;
  DocumentFragment = DocumentFragment;
  Document = Document;
  CharacterData = CharacterData;
  Comment = Comment;
  Text = Text;
  Element = Element;
  HTMLElement = HTMLElement;
  SVGElement = SVGElement;
  HTMLTemplateElement = HTMLTemplateElement;
  MutationObserver = MutationObserver;
  static setGlobal(window) {
    const properties = Object.getOwnPropertyDescriptors(window);
    delete properties.self;
    Object.defineProperties(globalThis, properties);
    if (typeof globalThis.self === "undefined") {
      Object.defineProperty(globalThis, "self", {
        value: window,
        configurable: true,
        writable: true,
        enumerable: true
      });
    } else {
      Object.defineProperties(self, properties);
    }
  }
  static setGlobalThis(window) {
    for (const property in window) {
      if (window[property] === window) {
        window[property] = globalThis;
      }
    }
    const properties = Object.getOwnPropertyDescriptors(window);
    const eventTargetPrototypeProperties = Object.getOwnPropertyDescriptors(
      EventTarget.prototype
    );
    for (const descriptor of Object.values(eventTargetPrototypeProperties)) {
      if (typeof descriptor.value === "function") {
        descriptor.value = descriptor.value.bind(window);
      }
    }
    Object.defineProperties(globalThis, properties);
    Object.defineProperties(globalThis, eventTargetPrototypeProperties);
  }
}

export { Window };
