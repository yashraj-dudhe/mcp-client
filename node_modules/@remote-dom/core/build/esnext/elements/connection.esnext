class BatchingRemoteConnection {
  #connection;
  #queued;
  #batch;
  constructor(connection, {
    batch = createDefaultBatchFunction()
  } = {}) {
    this.#connection = connection;
    this.#batch = batch;
  }
  call(id, method, ...args) {
    this.#connection.call(id, method, ...args);
  }
  mutate(records) {
    const queued = this.#queued;
    this.#queued ??= [];
    this.#queued.push(...records);
    if (queued) {
      return;
    }
    this.#batch(() => {
      this.flush();
    });
  }
  flush() {
    if (!this.#queued) {
      return;
    }
    this.#connection.mutate(this.#queued);
    this.#queued = void 0;
  }
}
function createDefaultBatchFunction() {
  let channel;
  return (queue) => {
    if (typeof MessageChannel !== "function") {
      setTimeout(() => {
        queue();
      }, 0);
      return;
    }
    channel ??= new MessageChannel();
    channel.port1.onmessage = () => {
      queue();
    };
    channel.port2.postMessage(null);
  };
}

export { BatchingRemoteConnection };
